p3 <- ggplot(exp1_2_1, aes(x=Run, y=Speed, group=Expt, color=Expt)) + geom_line()
p3
p4 <- ggplot(Cars93, aes(x=MPG.highway)) + stat_bin(binwidth=5)
p4
p4 <- ggplot(Cars93, aes(x=MPG.highway)) + stat_bin()
p4
p5 <- ggplot(Cars93, aes(x=MPG.highway, y=..density..)) + stat_bin(binwidth=5)
p5
p6 <- ggplot(Cars95, aes(x=MPG.highway)) + geom_histogram()
p6 <- ggplot(Cars93, aes(x=MPG.highway)) + geom_histogram()
p6
p6 <- ggplot(Cars93, aes(x=MPG.highway)) + geom_histogram(bin=5)
p6
p7 <- ggplot(Cars95, aes(x=MPG.highway, y=..density..)) + geom_histogram(alpha=.5) + geom_density()
p7 <- ggplot(Cars93, aes(x=MPG.highway, y=..density..)) + geom_histogram(alpha=.5) + geom_density()
p7
p7 <- ggplot(Cars93, aes(x=MPG.highway, y=..density..)) + geom_histogram(alpha=.5, binwidth=5) + geom_density()
p7
p8 <- ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point()+ geom_smooth()
p8
p8 <- geom_smooth(method="lm", se=FALSE)#removes the standard error shading from the plot above
p8
p8 <- geom_smooth(method="lm", se=FALSE)#removes the standard error shading from the plot above
p8
p8 <- ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point()+ geom_smooth(method="lm", se=FALSE)
p8
p8 <- ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point()+ geom_smooth(method="lm",formula=y ~ poly(x,2), se=FALSE)
p8
data(PearsonLee)
attach(PearsonLee)
View(PearsonLee)
p9 <- ggplot(PearsonLee, aes(y=child, x=parent)) + geom_point(alpha=.5) +geom_smooth(method="loess") + facet_grid(par ~ chl)
p9
p10 <- ggplot(Cars93_1, aes(x=Weight, y=MPG.highway)) + geom_point(cex=3) + geom_smooth(method="lm", se=FALSE) +
facet_grid(~ price)
p10
p9 <- ggplot(PearsonLee, aes(y=child, x=parent)) + geom_point(alpha=.5) +
geom_smooth(method="loess") + facet_grid(par ~ chl)
p11<- ggplot(PearsonLee, aes(y=child, x=parent)) + geom_point(alpha=.5) +
geom_smooth(method="loess") + facet_grid(par ~ chl, margins="chl")
p9
p11
p9
p11
p9
p11
p12 <- ggplot(morley, aes(x=Speed)) + geom_histogram(binwith=50) + facet_wrap(~Expt)
p12
require(dplyr)
require(UsingR)
require(HistData)
require(MASS)
require(lattice)
data("kid.weights")
data("michelson")
data("fat")
data("SAT")
data("heartrate")
data("grades")
data("Fingerprints")
data("Titanic")
data("morley")
data("Cars93")
data("ToothGrowth") #not part of UsingR
data(PearsonLee)
attach(kid.weights)
attach(michelson)
attach(fat)
attach(SAT)
attach(heartrate)
attach(grades)
attach(Fingerprints)
attach(Cars93)
attach(Titanic)
attach(morley)
attach(PearsonLee)
sample(0:1, size=10, replace=TRUE)
sample(0:1, size=100, replace=TRUE)#default is to sample without replacement
sample1 <- sample(0:1, size=100, replace=TRUE)#default is to sample without replacement
sum(sample1)
sample2 <- sample(1:6, size=10, replace=TRUE)#roll of die 10 times
sum(sample2)
mean(sample2)
sample2 <- sample(1:6, size=1000, replace=TRUE)#roll of die 10 times
mean(sample2)
sample2 <- sample(1:6, size=100000, replace=TRUE)#roll of die 10 times
mean(sample2)
sample3 <- sample(1:6, size=10, replace=TRUE) + sample(1:6, size=10, replace=TRUE)
sample3
sample3 <- sample(1:6, size=1000, replace=TRUE) + sample(1:6, size=1000, replace=TRUE)
mean(sample3)
sample3 <- sample(1:6, size=100000, replace=TRUE) + sample(1:6, size=100000, replace=TRUE)
mean(sample3)
sample3 <- sample(1:6, size=1000000, replace=TRUE) + sample(1:6, size=1000000, replace=TRUE)
mean(sample3)
sampl4 <-  sample(rep(0:1), c(3200, 6800), size=10, replace=TRUE)
sample4 <-  sample(rep(0:1), c(3200, 6800), size=10, replace=TRUE)
sample4
rep(0:1)
sample4
?sample
sample(rep(0:1), c(3200, 6800))
sample(rep(0:1), c(3200, 6800), replace=TRUE)
sample(rep(0:1), c(3200, 6800), size=10,replace=TRUE)
rep(0:2)
rep(0:2, size=10)
rep(0:2, size=10, replace=TRUE)
rep(0:2, c(3200, 6800))
rep(0:2, c(3200, 6800), replace=TRUE)
rep(0:2, c(3200, 6800), size=10)
rep(0:2, size=1)
rep(0:2, size=2)
rep(0:2, size=3)
rep(0:2, size=4)
rep(0:2, size=100)
rep(0:2, size=100, replace=TRUE)
rep(0:2, size=10, replace=TRUE)
?rep
rep(0:2, times=10, replace=TRUE)
rep(0:1, times=10, replace=TRUE)
rep(0:1, times=10)
rep(0:1, times=c(3200, 6800))
require(dplyr)
require(UsingR)
require(HistData)
require(MASS)
require(lattice)
data("kid.weights")
data("michelson")
data("fat")
data("SAT")
data("heartrate")
data("grades")
data("Fingerprints")
data("Titanic")
data("morley")
data("Cars93")
data("ToothGrowth") #not part of UsingR
data(PearsonLee)
attach(kid.weights)
attach(michelson)
attach(fat)
attach(SAT)
attach(heartrate)
attach(grades)
attach(Fingerprints)
attach(Cars93)
attach(Titanic)
attach(morley)
attach(PearsonLee)
dunif(x=1, min=0, max=3)
dunif(x=1, min=0, max=5)
dunif(x=1, min=0, max=10)
dunif(x=1, min=1, max=10)
punif(q=2, min=0, max=3)
punif(q=2, min=0, max=3) # p returns the CDF distribution - this statement gives 1/(b-a) = 1/3
punif(q=1, min=0, max=3) # p returns the CDF distribution - this statement gives 1/(b-a) = 1/3
qunif(p=1/2, min=0, max=3)
runif(n=1, min=0, max=3)
runif(5, min=0, max=1:5)
runif(5, min=0, max=1:5)
runif(5, min=0, max=1:5)
runif(5, min=0, max=1:5)
runif(5, min=0, max=1:5)
runif(10, min=0, max=1:5)
runif(10, min=0, max=1:5)
runif(10, min=0, max=1:5)
runif(10, min=0, max=1:5)
max(runif(10, min=0, max=1:5))
max(runif(10, min=0, max=1:5))
max(runif(10, min=0, max=1:5))
max(runif(10, min=0, max=1:5))
max(runif(10, min=0, max=1:5))
max(runif(10, min=0, max=1:5))
max(runif(10, min=0, max=1:5))
runif(10, min=0, max=1:5)
runif(10, min=0, max=1:5) #returns
runif(10, min=1, max=1:5) #returns 10 random values between 1 and 5
runif(10, min=1, max=1:5) #returns 10 random values between 1 and 5
runif(10, min=1, max=1:5) #returns 10 random values between 1 and 5
runif(10, min=1, max=1:5) #returns 10 random values between 1 and 5
x <- runif(100)
x
d <- density(x)
d
class(d)
?density
sd(d)
sd(x)
d <- density(x)
d <- density(x) #note the outpunt if d is a class of density!
d
curve(dunif, -.1, 1.1, ylim=c(0,max(d$y,1)))
lines(d, lty=2)
rug(x)
?rug
?curve
curve(dunif, d$Min, d$Max, ylim=c(0,max(d$y,1)))
curve(dunif, -.1, 1.1, ylim=c(0,max(d$y,1))) #plots the function
curve(dunif, d$Min-1, d$Max+1, ylim=c(0,max(d$y,1)))
curve(dunif, d$Min-1, d$Max, ylim=c(0,max(d$y,1)))
curve(dunif, d$Min, d$Max, ylim=c(0,max(d$y,1)))
curve(dunif, d$Min-1, d$Max, ylim=c(0,max(d$y,1)))
d$Min
d$min
min(d$x)
curve(dunif, min(d$x), max(d$x), ylim=c(0,max(d$y,1)))
lines(d, lty=2) # adds the density estimate
x <- runif(1000) #1000 random values from uniform distribution
d <- density(x) #note the outpunt if d is a class of density! This is what is returned:
curve(dunif, min(d$x), max(d$x), ylim=c(0,max(d$y,1))) #my version ;)
lines(d, lty=2) # adds the density estimate
rug(x) #adds a rug - 1-d plot - to the plot
curve(dunif, -.1, 1.1, ylim=c(0,max(d$y,1))) #plots the uniform distribution
lines(d, lty=2) # adds the density estimate
rug(x) #adds a rug - 1-d plot - to the plot
?rug
rug(x, lwd=.5) #adds a rug - 1-d plot - to the plot
rug(x, lwd=.05) #adds a rug - 1-d plot - to the plot
lines(d, lty=3) # adds the density estimate
x <- runif(100000) #1000 random values from uniform distribution
d <- density(x) #note the outpunt if d is a class of density! This is what is returned:
curve(dunif, -.1, 1.1, ylim=c(0,max(d$y,1))) #plots the uniform distribution
lines(d, lty=2) # adds the density estimate
rug(x, lwd=.5) #adds a rug - 1-d plot - to the plot
rug(x) #adds a rug - 1-d plot - to the plot
x <- runif(10000000) #1000 random values from uniform distribution
d <- density(x) #note the outpunt if d is a class of density! This is what is returned:
curve(dunif, -.1, 1.1, ylim=c(0,max(d$y,1))) #plots the uniform distribution
lines(d, lty=2) # adds the density estimate
x <- runif(100) #100 random values from uniform distribution
d <- density(x) #note the outpunt if d is a class of density! This is what is returned:
curve(dunif, -.1, 1.1, ylim=c(0,max(d$y,1))) #plots the uniform distribution
lines(d, lty=2) # adds the density estimate
rug(x) #adds a rug - 1-d plot - to the plot
sample(0:1, size=n, replace=TRUE, prob=c(1-p, p))
n <- 10; p <- 1/4
sample(0:1, size=n, replace=TRUE, prob=c(1-p, p))
?sample
sample(0:1, size=n, replace=TRUE, prob=c(1-p, p))
sample(0:1, size=n, replace=TRUE, prob=c(1-p, p))
sample(0:1, size=n, replace=TRUE, prob=c(1-p, p))
sample(0:1, size=n, replace=TRUE, prob=c(1-p, p))
sample(0:1, size=n, replace=TRUE, prob=c(1-p, p))
sample(0:1, size=n, replace=TRUE, prob=c(1-p, p))
sample(0:1, size=n, replace=TRUE, prob=c(1-p, p))
sample(0:1, size=n, replace=TRUE, prob=c(1-p, p))
dbinom(5, size=10, prob=1/2)
pbinom(5, size=10, prob=1/2)
dbinom(5, size=10, prob=1/2)
dbinom(9, size=10, prob=1/2) #result is there is a 24.6% probability that 5 heads will be counted
dbinom(1, size=10, prob=1/2) #result is there is a 24.6% probability that 5 heads will be counted
dbinom(4, size=10, prob=1/2) #result is there is a 24.6% probability that 5 heads will be counted
dbinom(6, size=10, prob=1/2) #result is there is a 24.6% probability that 5 heads will be counted
dbinom(5, size=10, prob=1/2) #result is there is a 24.6% probability that 5 heads will be counted
sum(dbinom(0:6, size=10, prob=1/2))
pbinom(6, size=10, p=1/2)
?dbinom
pbinom(5, size=10, prob=1/2)
dbinom(5, size=10, prob=1/2)
pexp(2, rate=1/3)
pexp(50, rate=1/5)
curve(pexp(50, rate=1/5)
)
X <- rexp(n=50, rate=1/5)
curve(x)
curve(X)
X <- rexp(n=50, rate=1/5)
curve(X)
answers()
require(UsingR)
answrs()
answers()
samples <- rlnorm(100, meanlog=0, sdlog=1)
par(fig=c(0,1,0,0.35))
boxplot(samples, horizontal=T, bty="n", xlab="log-normal distribution")
par(fig=c(0,1,0.25,1), new=T)
s <- seq(0,max(samples),0.1)
d <- dlnorm(s, meanlog=0, sdlog=1)
hist(samples, prob=T, main="", col=gray(0.9), ylim=c(0,max(d)))
lines(density(samples), lty=2)
curve(dlnorm(x, meanlog=0, sdlog=1), lwd=2, add=T)
rug(samples
samples <- rexp(100, meanlog=0, sdlog=1)
samples <- rexp(100, meanlog=0, sdlog=1)
samples <- rexp(100, rate=1/5)
par(fig=c(0,1,0,0.35))
boxplot(samples, horizontal=T, bty="n", xlab="log-normal distribution")
par(fig=c(0,1,0.25,1), new=T)
s <- seq(0,max(samples),0.1)
d <- dexp(s, meanlog=0, sdlog=1)
d <- dexp(s, rate=1/5)
hist(samples, prob=T, main="", col=gray(0.9), ylim=c(0,max(d)))
lines(density(samples), lty=2)
curve(dexp(x, rate=1/5), lwd=2, add=T)
rug(samples)
source('~/GitHub/UsingR/code/mainCode.R')
samples <- rlnorm(100, meanlog=0, sdlog=1)
par(fig=c(0,1,0,0.35))
boxplot(samples, horizontal=T, bty="n", xlab="log-normal distribution")
par(fig=c(0,1,0.25,1), new=T)
s <- seq(0,max(samples),0.1)
d <- dlnorm(s, meanlog=0, sdlog=1)
hist(samples, prob=T, main="", col=gray(0.9), ylim=c(0,max(d)))
lines(density(samples), lty=2)
curve(dlnorm(x, meanlog=0, sdlog=1), lwd=2, add=T)
rug(samples)
s
class(s)
class(d)
d
?dlnorm
samples <- rlnorm(100, meanlog=0, sdlog=1)
par(fig=c(0,1,0,0.35))
boxplot(samples, horizontal=T, bty="n", xlab="log-normal distribution")
par(fig=c(0,1,0.25,1), new=T)
s <- seq(0,max(samples),0.1)#numerical vector from 0 to the max of samples - 10.6 incremented by .1
hist(samples, prob=T, main="", col=gray(0.9), ylim=c(0,max(d)))
lines(density(samples), lty=2)
curve(dlnorm(x, meanlog=0, sdlog=1), lwd=2, add=T)
samples <- rlnorm(100, meanlog=0, sdlog=1)
boxplot(samples, horizontal=T, bty="n", xlab="log-normal distribution")
s <- seq(0,max(samples),0.1)#numerical vector from 0 to the max of samples - 10.6 incremented by .1
hist(samples, prob=T, main="", col=gray(0.9), ylim=c(0,max(d)))
lines(density(samples), lty=2)
curve(dlnorm(x, meanlog=0, sdlog=1), lwd=2, add=T)
samples <- rlnorm(100, meanlog=0, sdlog=3)
par(fig=c(0,1,0,0.35))
boxplot(samples, horizontal=T, bty="n", xlab="log-normal distribution")
par(fig=c(0,1,0.25,1), new=T)
s <- seq(0,max(samples),0.1)#numerical vector from 0 to the max of samples - 10.6 incremented by .1
hist(samples, prob=T, main="", col=gray(0.9), ylim=c(0,max(d)))
lines(density(samples), lty=2)
curve(dlnorm(x, meanlog=0, sdlog=1), lwd=2, add=T)
samples <- rlnorm(100, meanlog=0, sdlog=.3)
par(fig=c(0,1,0,0.35))
boxplot(samples, horizontal=T, bty="n", xlab="log-normal distribution")
par(fig=c(0,1,0.25,1), new=T)
s <- seq(0,max(samples),0.1)#numerical vector from 0 to the max of samples - 10.6 incremented by .1
hist(samples, prob=T, main="", col=gray(0.9), ylim=c(0,max(d)))
lines(density(samples), lty=2)
curve(dlnorm(x, meanlog=0, sdlog=1), lwd=2, add=T)
samples <- rlnorm(100, meanlog=0, sdlog=.9)
par(fig=c(0,1,0,0.35))
boxplot(samples, horizontal=T, bty="n", xlab="log-normal distribution")
par(fig=c(0,1,0.25,1), new=T)
s <- seq(0,max(samples),0.1)#numerical vector from 0 to the max of samples - 10.6 incremented by .1
hist(samples, prob=T, main="", col=gray(0.9), ylim=c(0,max(d)))
lines(density(samples), lty=2)
curve(dlnorm(x, meanlog=0, sdlog=1), lwd=2, add=T)
samples <- rlnorm(100, meanlog=0, sdlog=1)
par(fig=c(0,1,0,0.35))
boxplot(samples, horizontal=T, bty="n", xlab="log-normal distribution")
par(fig=c(0,1,0.25,1), new=T)
s <- seq(0,max(samples),0.1)#numerical vector from 0 to the max of samples - 10.6 incremented by .1
hist(samples, prob=T, main="", col=gray(0.9), ylim=c(0,max(d)))
lines(density(samples), lty=2)
curve(dlnorm(x, meanlog=0, sdlog=1), lwd=2, add=T)
samples <- rlnorm(100, meanlog=0, sdlog=1)
par(fig=c(0,1,0,0.35))
boxplot(samples, horizontal=T, bty="n", xlab="log-normal distribution")
par(fig=c(0,1,0.25,1), new=T)
s <- seq(0,max(samples),0.1)#numerical vector from 0 to the max of samples - 10.6 incremented by .1
hist(samples, prob=T, main="", col=gray(0.9), ylim=c(0,max(d)))
lines(density(samples), lty=2)
curve(dlnorm(x, meanlog=0, sdlog=1), lwd=2, add=T)
qt(c(.025, .975))
qt(c(.025, .975), df=10)
qf(c(.025, .975), df1=10, df2=5)
qchisq(c(.025, .975), df=1-)
qchisq(c(.025, .975), df=1)
pnorm(.9, mean=1, sd=1/sqrt(20))
dnorm(.9, mean=1, sd=1/sqrt(20))
x <- seq(0,50,1)
y <- dbinom(x,50,0.2)
plot(x,y, col="blue", "l", ylab="Binomial Density")
x <- seq(10:30,50,1)
?dbinom
x <- seq(0,10:30,1)
library(binom)
install.packages("binom")
library(binom)
set.seed(0)
nsims <- 10000
maxn <- 500
n <- seq(2,maxn, by=2)
my.method <- c("exact", "ac", "asymptotic", "wilson", "prop.test", "bayes", "logit", "cloglog", "probit")
my.method <- my.method[sort.list(my.method)]
coverage <- matrix(NA, nrow=length(n), ncol=length(my.method))
ci.lower <- ci.upper <- matrix(NA, ncol=length(my.method), nrow=length(n))
for(i in 1:length(n)){
m <- n[i]/2
y <- rbinom(nsims, n[i], m/n[i])
ll <- binom.confint(m,n[i], conf.level=.95, method=my.method)$lower
ul <- binom.confint(m,n[i], conf.level=.95, method=my.method)$upper
ci.lower[i,] <- ll
ci.upper[i,] <- ul
for(j in 1:length(my.method)){
sig <- length(y[y/n[i]<=ul[j] &amp;amp;amp;amp;amp; y/n[i]>=ll[j]])
coverage[i,j] <- sig/nsims
library(binom)
set.seed(0)
nsims <- 10000
maxn <- 500
n <- seq(2,maxn, by=2)
my.method <- c("exact", "ac", "asymptotic", "wilson", "prop.test", "bayes", "logit", "cloglog", "probit")
my.method <- my.method[sort.list(my.method)]
coverage <- matrix(NA, nrow=length(n), ncol=length(my.method))
ci.lower <- ci.upper <- matrix(NA, ncol=length(my.method), nrow=length(n))
for(i in 1:length(n)){
m <- n[i]/2
y <- rbinom(nsims, n[i], m/n[i])
ll <- binom.confint(m,n[i], conf.level=.95, method=my.method)$lower
ul <- binom.confint(m,n[i], conf.level=.95, method=my.method)$upper
ci.lower[i,] <- ll
ci.upper[i,] <- ul
for(j in 1:length(my.method)){
sig <- length(y[y/n[i]<=ul[j] &amp;amp;amp;amp;amp; y/n[i]>=ll[j]])
coverage[i,j] <- sig/nsims
source('F:/Skydrive/Certification/Data Science Specialization/R_Working_Dir/UsingR/code/mainCode.R')
func1 <- replicate(M, mean(rnorm(n, mean=mu, sd=sigma)))
func1(10)
M <- 10 #M is the number of times you run the sample of 16
func1 <- replicate(M, mean(rnorm(n, mean=mu, sd=sigma)))
M <- 10 #M is the number of times you run the sample of 16
n=16; mu=100; sigma=16
func1 <- replicate(M, mean(rnorm(n, mean=mu, sd=sigma)))
func1 <- function(M, n, mu, sd) {replicate(M, mean(rnorm(n, mean=mu, sd=sigma)))}
func1(10, 16, 100, 16)
func1(1000, 16, 100, 16)
help("scale")
scale(rnorm(7, 100, 16))
zstat <- function(x, mu, sigma){
(mean(x)-mu)/(sigma/sqrt(length(x)))
}
M <- 2000; n <- 7; mu <- 100; sigma <- 16
zstat <- function(x, mu, sigma){
(mean(x)-mu)/(sigma/sqrt(length(x)))
}
M <- 2000; n <- 7; mu <- 100; sigma <- 16
res <- replicate(M, {
x <- rnorm(n, mu, sigma)
zstat(x, mu, sigma)
})
res
qqnorm(res)
tmp1 <- zstat(x, mu, sigma)
tmp1 <- zstat(rnorm(n, mu, sigma), mu, sigma)
tmp2 <- scale(rnorm(n, mu, sigma), center=TRUE, scale=TRUE)
tmp2
tmp1 <- zstat(replicate(M,rnorm(n, mu, sigma), mu, sigma))
plot(res)
boxplot(res)
zstat(10, 1, 1)
zstat(1000, 1, 1)
zstat(3, 1, 1)
func1(10, 16, 100, 16)
plot(func1(1000, 16, 100, 16))
?replicate
t
tstat <- function(x, mu){
(mean(x)-mu) / (sd(x) /sqrt(length(x)))}
mu <- 0; sigma <- 1; M <- 750; n <- 4
res2 <- replicate(M, tstat(rnorm(n, mu, sigma), mu))
boxplot(res2)
hist(res2)
hist(res2, binwidth=50)
hist(res2, bin=50)
hist(res2, bin=5)
hist(res2)
hist(res)
M <- 20000; n <- 7; mu <- 100; sigma <- 16
res <- replicate(M, {
x <- rnorm(n, mu, sigma)
zstat(x, mu, sigma)
})
hist(res)
tstat <- function(x, mu){
(mean(x)-mu) / (sd(x) /sqrt(length(x)))}
mu <- 0; sigma <- 1; M <- 75000; n <- 4
res2 <- replicate(M, tstat(rnorm(n, mu, sigma), mu))
boxplot(res2)
hist(res2)
lines(density(res2), lty=2)
tstat <- function(x, mu){
(mean(x)-mu) / (sd(x) /sqrt(length(x)))}
mu <- 0; sigma <- 1; M <- 750; n <- 4
res2 <- replicate(M, tstat(rnorm(n, mu, sigma), mu))
boxplot(res2)
hist(res2)
lines(density(res2), lty=2)
lines(d, lty=2)
lines(density(res2), lty=2)
mu <- 0; sigma <- 1; M <- 750; n <- 4
res2 <- replicate(M, tstat(rnorm(n, mu, sigma), mu))
boxplot(res2)
hist(res2)
lines(density(res2), lty=2)
(mean(x)-mu) / (sd(x) /sqrt(length(x)))}
mu <- 0; sigma <- 1; M <- 750; n <- 4
res2 <- replicate(M, tstat(rnorm(n, mu, sigma), mu))
#boxplot(res2)
hist(res2)
lines(density(res2), lty=2)
M <- 1000; n <- 35
res_mean <- replicate(M, mean(rnorm(n)))
res_median <- replicate(M, median(rnorm(n)))
boxplot(list("Sample Mean"=res_mean, "Sample Median"=res_median), main="Normal Population")
M <- 100000; n <- 35
res_mean <- replicate(M, mean(rnorm(n)))
res_median <- replicate(M, median(rnorm(n)))
boxplot(list("Sample Mean"=res_mean, "Sample Median"=res_median), main="Normal Population")

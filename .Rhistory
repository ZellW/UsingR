dbinom(9, size=10, prob=1/2) #result is there is a 24.6% probability that 5 heads will be counted
dbinom(1, size=10, prob=1/2) #result is there is a 24.6% probability that 5 heads will be counted
dbinom(4, size=10, prob=1/2) #result is there is a 24.6% probability that 5 heads will be counted
dbinom(6, size=10, prob=1/2) #result is there is a 24.6% probability that 5 heads will be counted
dbinom(5, size=10, prob=1/2) #result is there is a 24.6% probability that 5 heads will be counted
sum(dbinom(0:6, size=10, prob=1/2))
pbinom(6, size=10, p=1/2)
?dbinom
pbinom(5, size=10, prob=1/2)
dbinom(5, size=10, prob=1/2)
pexp(2, rate=1/3)
pexp(50, rate=1/5)
curve(pexp(50, rate=1/5)
)
X <- rexp(n=50, rate=1/5)
curve(x)
curve(X)
X <- rexp(n=50, rate=1/5)
curve(X)
answers()
require(UsingR)
answrs()
answers()
samples <- rlnorm(100, meanlog=0, sdlog=1)
par(fig=c(0,1,0,0.35))
boxplot(samples, horizontal=T, bty="n", xlab="log-normal distribution")
par(fig=c(0,1,0.25,1), new=T)
s <- seq(0,max(samples),0.1)
d <- dlnorm(s, meanlog=0, sdlog=1)
hist(samples, prob=T, main="", col=gray(0.9), ylim=c(0,max(d)))
lines(density(samples), lty=2)
curve(dlnorm(x, meanlog=0, sdlog=1), lwd=2, add=T)
rug(samples
samples <- rexp(100, meanlog=0, sdlog=1)
samples <- rexp(100, meanlog=0, sdlog=1)
samples <- rexp(100, rate=1/5)
par(fig=c(0,1,0,0.35))
boxplot(samples, horizontal=T, bty="n", xlab="log-normal distribution")
par(fig=c(0,1,0.25,1), new=T)
s <- seq(0,max(samples),0.1)
d <- dexp(s, meanlog=0, sdlog=1)
d <- dexp(s, rate=1/5)
hist(samples, prob=T, main="", col=gray(0.9), ylim=c(0,max(d)))
lines(density(samples), lty=2)
curve(dexp(x, rate=1/5), lwd=2, add=T)
rug(samples)
source('~/GitHub/UsingR/code/mainCode.R')
samples <- rlnorm(100, meanlog=0, sdlog=1)
par(fig=c(0,1,0,0.35))
boxplot(samples, horizontal=T, bty="n", xlab="log-normal distribution")
par(fig=c(0,1,0.25,1), new=T)
s <- seq(0,max(samples),0.1)
d <- dlnorm(s, meanlog=0, sdlog=1)
hist(samples, prob=T, main="", col=gray(0.9), ylim=c(0,max(d)))
lines(density(samples), lty=2)
curve(dlnorm(x, meanlog=0, sdlog=1), lwd=2, add=T)
rug(samples)
s
class(s)
class(d)
d
?dlnorm
samples <- rlnorm(100, meanlog=0, sdlog=1)
par(fig=c(0,1,0,0.35))
boxplot(samples, horizontal=T, bty="n", xlab="log-normal distribution")
par(fig=c(0,1,0.25,1), new=T)
s <- seq(0,max(samples),0.1)#numerical vector from 0 to the max of samples - 10.6 incremented by .1
hist(samples, prob=T, main="", col=gray(0.9), ylim=c(0,max(d)))
lines(density(samples), lty=2)
curve(dlnorm(x, meanlog=0, sdlog=1), lwd=2, add=T)
samples <- rlnorm(100, meanlog=0, sdlog=1)
boxplot(samples, horizontal=T, bty="n", xlab="log-normal distribution")
s <- seq(0,max(samples),0.1)#numerical vector from 0 to the max of samples - 10.6 incremented by .1
hist(samples, prob=T, main="", col=gray(0.9), ylim=c(0,max(d)))
lines(density(samples), lty=2)
curve(dlnorm(x, meanlog=0, sdlog=1), lwd=2, add=T)
samples <- rlnorm(100, meanlog=0, sdlog=3)
par(fig=c(0,1,0,0.35))
boxplot(samples, horizontal=T, bty="n", xlab="log-normal distribution")
par(fig=c(0,1,0.25,1), new=T)
s <- seq(0,max(samples),0.1)#numerical vector from 0 to the max of samples - 10.6 incremented by .1
hist(samples, prob=T, main="", col=gray(0.9), ylim=c(0,max(d)))
lines(density(samples), lty=2)
curve(dlnorm(x, meanlog=0, sdlog=1), lwd=2, add=T)
samples <- rlnorm(100, meanlog=0, sdlog=.3)
par(fig=c(0,1,0,0.35))
boxplot(samples, horizontal=T, bty="n", xlab="log-normal distribution")
par(fig=c(0,1,0.25,1), new=T)
s <- seq(0,max(samples),0.1)#numerical vector from 0 to the max of samples - 10.6 incremented by .1
hist(samples, prob=T, main="", col=gray(0.9), ylim=c(0,max(d)))
lines(density(samples), lty=2)
curve(dlnorm(x, meanlog=0, sdlog=1), lwd=2, add=T)
samples <- rlnorm(100, meanlog=0, sdlog=.9)
par(fig=c(0,1,0,0.35))
boxplot(samples, horizontal=T, bty="n", xlab="log-normal distribution")
par(fig=c(0,1,0.25,1), new=T)
s <- seq(0,max(samples),0.1)#numerical vector from 0 to the max of samples - 10.6 incremented by .1
hist(samples, prob=T, main="", col=gray(0.9), ylim=c(0,max(d)))
lines(density(samples), lty=2)
curve(dlnorm(x, meanlog=0, sdlog=1), lwd=2, add=T)
samples <- rlnorm(100, meanlog=0, sdlog=1)
par(fig=c(0,1,0,0.35))
boxplot(samples, horizontal=T, bty="n", xlab="log-normal distribution")
par(fig=c(0,1,0.25,1), new=T)
s <- seq(0,max(samples),0.1)#numerical vector from 0 to the max of samples - 10.6 incremented by .1
hist(samples, prob=T, main="", col=gray(0.9), ylim=c(0,max(d)))
lines(density(samples), lty=2)
curve(dlnorm(x, meanlog=0, sdlog=1), lwd=2, add=T)
samples <- rlnorm(100, meanlog=0, sdlog=1)
par(fig=c(0,1,0,0.35))
boxplot(samples, horizontal=T, bty="n", xlab="log-normal distribution")
par(fig=c(0,1,0.25,1), new=T)
s <- seq(0,max(samples),0.1)#numerical vector from 0 to the max of samples - 10.6 incremented by .1
hist(samples, prob=T, main="", col=gray(0.9), ylim=c(0,max(d)))
lines(density(samples), lty=2)
curve(dlnorm(x, meanlog=0, sdlog=1), lwd=2, add=T)
qt(c(.025, .975))
qt(c(.025, .975), df=10)
qf(c(.025, .975), df1=10, df2=5)
qchisq(c(.025, .975), df=1-)
qchisq(c(.025, .975), df=1)
pnorm(.9, mean=1, sd=1/sqrt(20))
dnorm(.9, mean=1, sd=1/sqrt(20))
x <- seq(0,50,1)
y <- dbinom(x,50,0.2)
plot(x,y, col="blue", "l", ylab="Binomial Density")
x <- seq(10:30,50,1)
?dbinom
x <- seq(0,10:30,1)
library(binom)
install.packages("binom")
library(binom)
set.seed(0)
nsims <- 10000
maxn <- 500
n <- seq(2,maxn, by=2)
my.method <- c("exact", "ac", "asymptotic", "wilson", "prop.test", "bayes", "logit", "cloglog", "probit")
my.method <- my.method[sort.list(my.method)]
coverage <- matrix(NA, nrow=length(n), ncol=length(my.method))
ci.lower <- ci.upper <- matrix(NA, ncol=length(my.method), nrow=length(n))
for(i in 1:length(n)){
m <- n[i]/2
y <- rbinom(nsims, n[i], m/n[i])
ll <- binom.confint(m,n[i], conf.level=.95, method=my.method)$lower
ul <- binom.confint(m,n[i], conf.level=.95, method=my.method)$upper
ci.lower[i,] <- ll
ci.upper[i,] <- ul
for(j in 1:length(my.method)){
sig <- length(y[y/n[i]<=ul[j] &amp;amp;amp;amp;amp; y/n[i]>=ll[j]])
coverage[i,j] <- sig/nsims
library(binom)
set.seed(0)
nsims <- 10000
maxn <- 500
n <- seq(2,maxn, by=2)
my.method <- c("exact", "ac", "asymptotic", "wilson", "prop.test", "bayes", "logit", "cloglog", "probit")
my.method <- my.method[sort.list(my.method)]
coverage <- matrix(NA, nrow=length(n), ncol=length(my.method))
ci.lower <- ci.upper <- matrix(NA, ncol=length(my.method), nrow=length(n))
for(i in 1:length(n)){
m <- n[i]/2
y <- rbinom(nsims, n[i], m/n[i])
ll <- binom.confint(m,n[i], conf.level=.95, method=my.method)$lower
ul <- binom.confint(m,n[i], conf.level=.95, method=my.method)$upper
ci.lower[i,] <- ll
ci.upper[i,] <- ul
for(j in 1:length(my.method)){
sig <- length(y[y/n[i]<=ul[j] &amp;amp;amp;amp;amp; y/n[i]>=ll[j]])
coverage[i,j] <- sig/nsims
source('F:/Skydrive/Certification/Data Science Specialization/R_Working_Dir/UsingR/code/mainCode.R')
func1 <- replicate(M, mean(rnorm(n, mean=mu, sd=sigma)))
func1(10)
M <- 10 #M is the number of times you run the sample of 16
func1 <- replicate(M, mean(rnorm(n, mean=mu, sd=sigma)))
M <- 10 #M is the number of times you run the sample of 16
n=16; mu=100; sigma=16
func1 <- replicate(M, mean(rnorm(n, mean=mu, sd=sigma)))
func1 <- function(M, n, mu, sd) {replicate(M, mean(rnorm(n, mean=mu, sd=sigma)))}
func1(10, 16, 100, 16)
func1(1000, 16, 100, 16)
help("scale")
scale(rnorm(7, 100, 16))
zstat <- function(x, mu, sigma){
(mean(x)-mu)/(sigma/sqrt(length(x)))
}
M <- 2000; n <- 7; mu <- 100; sigma <- 16
zstat <- function(x, mu, sigma){
(mean(x)-mu)/(sigma/sqrt(length(x)))
}
M <- 2000; n <- 7; mu <- 100; sigma <- 16
res <- replicate(M, {
x <- rnorm(n, mu, sigma)
zstat(x, mu, sigma)
})
res
qqnorm(res)
tmp1 <- zstat(x, mu, sigma)
tmp1 <- zstat(rnorm(n, mu, sigma), mu, sigma)
tmp2 <- scale(rnorm(n, mu, sigma), center=TRUE, scale=TRUE)
tmp2
tmp1 <- zstat(replicate(M,rnorm(n, mu, sigma), mu, sigma))
plot(res)
boxplot(res)
zstat(10, 1, 1)
zstat(1000, 1, 1)
zstat(3, 1, 1)
func1(10, 16, 100, 16)
plot(func1(1000, 16, 100, 16))
?replicate
t
tstat <- function(x, mu){
(mean(x)-mu) / (sd(x) /sqrt(length(x)))}
mu <- 0; sigma <- 1; M <- 750; n <- 4
res2 <- replicate(M, tstat(rnorm(n, mu, sigma), mu))
boxplot(res2)
hist(res2)
hist(res2, binwidth=50)
hist(res2, bin=50)
hist(res2, bin=5)
hist(res2)
hist(res)
M <- 20000; n <- 7; mu <- 100; sigma <- 16
res <- replicate(M, {
x <- rnorm(n, mu, sigma)
zstat(x, mu, sigma)
})
hist(res)
tstat <- function(x, mu){
(mean(x)-mu) / (sd(x) /sqrt(length(x)))}
mu <- 0; sigma <- 1; M <- 75000; n <- 4
res2 <- replicate(M, tstat(rnorm(n, mu, sigma), mu))
boxplot(res2)
hist(res2)
lines(density(res2), lty=2)
tstat <- function(x, mu){
(mean(x)-mu) / (sd(x) /sqrt(length(x)))}
mu <- 0; sigma <- 1; M <- 750; n <- 4
res2 <- replicate(M, tstat(rnorm(n, mu, sigma), mu))
boxplot(res2)
hist(res2)
lines(density(res2), lty=2)
lines(d, lty=2)
lines(density(res2), lty=2)
mu <- 0; sigma <- 1; M <- 750; n <- 4
res2 <- replicate(M, tstat(rnorm(n, mu, sigma), mu))
boxplot(res2)
hist(res2)
lines(density(res2), lty=2)
(mean(x)-mu) / (sd(x) /sqrt(length(x)))}
mu <- 0; sigma <- 1; M <- 750; n <- 4
res2 <- replicate(M, tstat(rnorm(n, mu, sigma), mu))
#boxplot(res2)
hist(res2)
lines(density(res2), lty=2)
M <- 1000; n <- 35
res_mean <- replicate(M, mean(rnorm(n)))
res_median <- replicate(M, median(rnorm(n)))
boxplot(list("Sample Mean"=res_mean, "Sample Median"=res_median), main="Normal Population")
M <- 100000; n <- 35
res_mean <- replicate(M, mean(rnorm(n)))
res_median <- replicate(M, median(rnorm(n)))
boxplot(list("Sample Mean"=res_mean, "Sample Median"=res_median), main="Normal Population")
source('~/GitHub/UsingR/code/mainCode.R')
?sample
N <- 80; k <- 20; j <- 10
x <- sample(1:N, j, replace=FALSE)#Think 1:N as the pool (population) of numbers
x
k
sum(x %in% k)
sum(x %in% 1:k)
res3 <- replicate(M, {x <- sample(1:N, j, replace=TRUE)sum(x %in$ 1:k)})
res3 <- replicate(M, {
x <- sample(1:N, j, replace=FALSE)
sum(x %in 1:k)
res3 <- replicate(M, {
x <- sample(1:N, j, replace=FALSE)
sum(x %in% 1:k)
})
M <-  1000
res3 <- replicate(M, {
x <- sample(1:N, j, replace=FALSE)
sum(x %in% 1:k)
})
res
res3
M
N
j
k
M <-  10000
res3 <- replicate(M, {
x <- sample(1:N, j, replace=FALSE)
sum(x %in% 1:k)
})
c("Zero Matches"=sum(res3==0)/length(res3), "One Match"=sum(res3==1)/length(res3))
sum(res3>=5)/length(res3)
ctrl <- c(23, 33, 40); treatment <- c(19, 22, 25, 26)
testCtrl <- c(23, 33, 40); testTreatment <- c(19, 22, 25, 26)
the_data <- stack(list(ctrl=testCtrl, treatment=testTreatment))
the_data
?stack
aggregate(values~ind, the_data, mean)
?aggregate
testCtrl
tmp4 <- the_data %>% group_by(ind)
tmp4
tmp4 <- the_data %>% group_by(ind) %>% summarize(mean)
tmp4 <- the_data %>% group_by(ind) %>% summarize(Mean=mean(values))
tmp4 <- summerize(the_data, Mean=meanvalues)
tmp4 <- summarize(the_data, Mean=meanvalues)
the_data
names(the_data)
class(the_data)
the_data %>%
the_data %>% group(ind) %>% summarize(theMean = mean(values))
the_data %>% group_by(ind) %>% summarize(theMean = mean(values))
mean(the_data$values)
the_data %>% summarise(TheMean=mean(values))
the_data %>% group_by(ind) %>% summarise(TheMean=mean(values))
cmbs <- condn(7,3)
cmbs <- conbn(7,3)
cmbs <- combn(7,3)
cmdn
cmbs
class)cmbs
class(cmbs)
ind <- cmbs[,1]
obs <- mean(the_data$value[ind] - mean(the_data$value[-ind]))
obs
mean(the_data$value[ind]
)
mean(the_data$value[-ind]
)
the_data$value[-ind]
ind
cmbs[,1]
cmbs[,2]
?combn
testCtrl <- c(23, 33, 40); testTreatment <- c(19, 22, 25, 26)
the_data <- stack(list(ctrl=testCtrl, treatment=testTreatment))#Stacking vectors concatenates multiple vectors into
the_data %>% group_by(ind) %>% summarise(TheMean=mean(values))
require(dplyr)
require(UsingR)
the_data %>% group_by(ind) %>% summarise(TheMean=mean(values))
cmbs <- combn(7,3) #Generate all combinations of the elements of x taken m at a time. If x is a positive integer,
cmbs
ind <- cmbs[,1]#is the first set of 3 so the referenced values are still 23, 33, 40
obs <- mean(the_data$value[ind] - mean(the_data$value[-ind]))#selects the first 3 and then selects everything else left
ind <- cmbs[,2]#is the first set of 3 so the referenced values are still 23, 33, 40
the_data
res4 <- apply(cmbs, 2, function(ind){
mean(the_data$values[ind]) - mean(the_data$values[-ind])
})
hist(res4)
sum(res4>=obs)
sum(res4>=obs)/length(res4)
caf <- c(245, 246, 246, 248, 248, 248, 250, 250, 250, 252)
no_caf <- c(242, 242, 242, 244, 244, 245, 246, 247, 248, 248)
obs2 <- mean(caf)- mean(no_caf)
tmp2 <- combn(20,10)
tmp2
cls
?choose
choose(20,10)
choose(7,3)
ind <- cmbs[,2]#is the first set of 3 so the referenced values are still 23, 33, 40
cmbs <- combn(7,3) #Generate all combinations of the elements of x taken m at a time. If x is a positive integer,
cmbs_count <- choose(7,3)
tmp2 <- choose(20,10)
tmp3 <- choose(60,30)
sample(1:20, 10)
the_data2 <- stack(list(Caffiene=caf, No_Caffiene=no_caf))
the_data2
res5 <- replicate(2000, {
ind5 <- sample(1:20, 10, replace=FALSE)
mean(the_data2$values[ind]) - mean(the_data2$[-ind])
})
res5 <- replicate(2000, {
ind5 <- sample(1:20, 10, replace=FALSE)
mean(the_data2$values[ind5]) - mean(the_data2$[-ind5])
})
res5 <- replicate(2000, {
ind <- sample(1:20, 10, replace=FALSE)
mean(the_data2$values[ind]) - mean(the_data2$[-ind])
})
res5 <- replicate(2000, {
ind <- sample(1:20, 10, replace=FALSE)
mean(the_data2$values[ind]) - mean(the_data2$values[-ind])
})
sum(res5>obs2)/lendgth(res5)
sum(res5>obs2)/length(res5)
require(dplyr)
require(UsingR)
data (Medicare)
diabetes <- subset(Medicare, subset=DRG.Definition == "638 - DIABETES W CC")
View(Medicare)
View(diabetes)
diabetes <- filter(Medicare, DRG.Definition == "638 - DIABETES W CC")
priceGap <- with(diabetes, Average.Covered.Charges - Average.Total.Payments)
range(priceGap)
xbar <- mean(gap)
xbar
diabetes <- subset(Medicare, subset=DRG.Definition == "638 - DIABETES W CC") #or
range(priceGap)#Very large range
xbar <- mean(gap)
xbar
plot(xbar)
answers()
errata()
errata()
errata()
xbar
xbar <- mean(priceGap)
xstar <- sample(priceGap, length(priceGap, replace=TRUE))
xstar <- sample(priceGap, length(priceGap),replace=TRUE))
xstar <- sample(priceGap, length(priceGap),replace=TRUE)
mean(xstart-xbar)
mean(xstar-xbar)
M <- 2000;
res6 <- replicate(M,{
xstar <- sample(priceGap, length(priceGap), replace=TRUE)
mean(xstar)- xbar
})
alpha <- .05
xbar + quantile(res6, c(aplpha/2, 1-alpha/2))
xbar + quantile(res6, c(alpha/2, 1-alpha/2))
x <- 80; n <- 125
proportion <- x/n
alpha <- 1-0.90
zstar <- qnorm(1-alpha/2)
SE <- sqrt(proportion*(1-proportion/n))
MOE <- zstar*SE #Margin Of Error
proportion + c(1,-1)* MOE
SE <- sqrt(proportion*(1-proportion)/n)
MOE <- zstar*SE #Margin Of Error
proportion + c(1,-1)* MOE
prop.test(x,n)
?prop.test
prop.test(x,n, conf.level = .9)#same result
prop.test(x,n, conf.level = .9)$conf.int#same result
zstar2 <- .03/sqrt(.57*(1-.57)/1000)
alpha <- 2*pnorm(-zstar)
(1-alpha)*100
(1-alpha)*100
(1-alpha)*100
alpha <- 2*pnorm(-zstar2)
(1-alpha)*100
?qnorm
?pnorm
x <- 80; n <- 125
proportion <- x/n
alpha <- 1-0.90
zstar <- qnorm(1-alpha/2)#provides the quantile density function - why quantile - not sure.  See plot p 267 to understand this statement
SE <- sqrt(proportion*(1-proportion)/n)
MOE <- zstar*SE #Margin Of Error
proportion + c(1,-1)* MOE#0.7106177 0.5693823
#Compare using R formula
prop.test(x,n, conf.level = .9)#same result
zstar <- pnorm(1-alpha/2)#provides the quantile density function - why quantile - not sure.  See plot p 267 to understand this statement
SE <- sqrt(proportion*(1-proportion)/n)
MOE <- zstar*SE #Margin Of Error
proportion + c(1,-1)* MOE#0.7106177 0.5693823
#Compare using R formula
prop.test(x,n, conf.level = .9)#same result
z <- .03/sqrt(.57*(1-.57)/1000)
alpha <- 2*pnorm(-z)#
(1-alpha)*100#implied 95%
examples()
require(UsingR)
examples()
require(UsingR)
examples()
getAnswer(chapter=8, problem=5)
?qt
xbar <- 66; sd <- 4; n <- 4; alpha <- 1-.8
tstat <- qt(1-alpha/2, df=n-1)
SE <- sd/sqrt(n)
MOE <- tstat*SE
xbar+c(1,-1)* MOE
tstat <- pt(1-alpha/2, df=n-1)
SE <- sd/sqrt(n)
MOE <- tstat*SE
xbar+c(1,-1)* MOE
curve(dnorm(x, mean = 0, sd = 1), from = -2, to = 2)
curve(pnorm(x, mean = 0, sd = 1), from = -2, to = 2)
curve(qnorm(x, mean = 0, sd = 1), from = 0.022, to = 0.977)
samp.prob<-dnorm(1:10,mean = 4.5,sd = 2)
ratings <- sample(1:10, 36, replace = T, prob = samp.prob)
table(ratings)
plot(table(ratings),xlim = c(1,10))
table(ratings) / 36
sum(samp.prob[4:5])
c.ratings <- rnorm(36,mean = 4.5,sd = 2)
table(c.ratings)
plot(table(c.ratings),xlim = c(1,10))
hist(c.ratings,prob = T)
curve(dnorm(x,mean = mean(c.ratings),sd = sd(c.ratings)),add = T)
install.packages("ISwR")
library(ISwR)
summary(energy)
obese<-subset(energy,stature == "obese")$expend
lean<- subset(energy,stature == "lean")$expend
t.test(lean,obese)
t.test(energy$expend ~ energy$stature)
t.test(energy$expend ~ energy$obese, alt = "g")
obese
t.test(energy$expend ~ energy$obese, alt = "greater")
energy
t.test(energy$expend ~ energy$obese)
t.test(energy$expend ~ energy$obese, alt = "less")
var.test(energy$expend ~ energy$stature)
t.test(energy$expend ~ energy$stature, alt = "greater")

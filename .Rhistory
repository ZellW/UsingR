prop.table(table(grades$prev, grades$grade), margin=1)*100
15/28
data("HistData")
require(HistData)
data("Fingerprints")
attach(Fingerprints)
View(Fingerprints)
require(MASS)
data("Cars93")
attach(Cars93)
View(Cars93)
xtabs(count ~ Whorls + Loops, Fingerprints)
plot(count ~ Whorls + Loops, Fingerprints)
xtabs(~ Origin + Type, Cars93)
xtabs(count ~ Origin + Type, Cars93)
xtabs(count ~ ., Fingerprints)
require(dplyr)
require(UsingR)
require(HistData)
require(MASS)
data("kid.weights")
data("michelson")
data("fat")
data("SAT")
data("heartrate")
data("grades")
data("Fingerprints")
data("Cars93")
data("ToothGrowth") #not part of UsingR
attach(kid.weights)
attach(michelson)
attach(fat)
attach(SAT)
attach(heartrate)
attach(grades)
attach(Fingerprints)
attach(Cars93)
seatbelts <- matrix(c(56, 2, 8, 16), nrow=2)
barplot(seatbelts, xlab="Parent", main="Child Seat Belt Usage")
barplot(seatbelts, xlab="Parent", main="Child Seat Belt Usage", beside=TRUE)
barplot(seatbelts, xlab="Parent", main="Child Seat Belt Usage", legend.text=TRUE) #stacked bars
barplot(seatbelts, xlab="Parent", main="Child Seat Belt Usage", legend.text=TRUE) #stacked bars
barplot(seatbelts, xlab="Parent", main="Child Seat Belt Usage", beside=TRUE, legend.text=TRUE)
barplot(seatbelts, xlab="Parent", main="Child Seat Belt Usage", axisnames = TRUE) #stacked bars
dimnames(seatbelts) <- list(parent=c("buckled", "unbuckled"), child=c("buckled", "unbuckled"))
barplot(seatbelts, xlab="Parent", main="Child Seat Belt Usage") #stacked bars
barplot(seatbelts, xlab="Parent", main="Child Seat Belt Usage", beside=TRUE)
t(barplot(seatbelts))
t(barplot(seatbelts, xlab="Child"))
prop.table(seatblets)
barplot(seatbelts, xlab="Parent", main="Child Seat Belt Usage") #stacked bars
barplot(prop.table(seatbelts), xlab="Parent", main="Child Seat Belt Usage") #stacked bars
data("Titanic")
attach(Titanic)
class(Titanic)
Titanic
titanic <-  as.data.frame(Titatnic)
titanic <-  as.data.frame(Titanic)
View(titanic)
str(titanic)
mosaicplot(titanic)
?mosaicplot
titanic2 <- titanic
str(titanic2)
titanic2 <- Titanic
str(titanic2)
str(titanic)
mosaicplot(xtabs(Freq ~ Sex, titanic))
mosaicplot(xtabs(Freq ~ Sex + Survived, titanic))
mosaicplot(xtabs(Freq ~ Sex + Survived + Class, titanic))
mosaicplot(xtabs(Freq ~ Class +Sex + Survived, titanic))
mosaicplot(xtabs(Freq ~ Class + Survived, titanic))
mosaicplot(xtabs(Freq ~ Class + Survived + Sex, titanic))
mosaicplot(xtabs(Freq ~  Class + Survived, titanic))
mosaicplot(xtabs(Freq ~  Survived + Class, titanic))
Survived <- rep(titanic$Survived, titanic$Freq)
Survived
class(Survived)
Survived <- rep(titanic$Survived)
Survived
View(titanic)
sum(titanic$Freq)
Survived <- ordered(Survived)
Survived
Survived <- rep(titanic$Survived, titanic$Freq)#makes a factor class of Yes and No for each of the 2201 passengers
Survived <- ordered(Survived)
Survived
Class <- rep(titanic$Class, titanic$Freq)
Class <- ordered(Class)
head(Class)
Class
cor(as.numeric(Survived), as.numeric(Class), method="kendall")
?Ordered
?ordered
require(dplyr)
require(UsingR)
require(HistData)
require(MASS)
data("kid.weights")
data("michelson")
data("fat")
data("SAT")
data("heartrate")
data("grades")
data("Fingerprints")
data("Titanic")
data("Cars93")
data("ToothGrowth") #not part of UsingR
attach(kid.weights)
attach(michelson)
attach(fat)
attach(SAT)
attach(heartrate)
attach(grades)
attach(Fingerprints)
attach(Cars93)
attach(Titanic)
lst1 <- with(ToothGrowth, split(len, supp))
sapply(lst1, mean)
sapply(lst1, mean, sd)
sapply(lst1, sd)
with(ToothGrowth, len, supp, sd)
with(ToothGrowth, tapply( len, supp, sd))
with(ToothGrowth, tapply(len, list(supp, dose), mean))
agrregate(len~supp, ToothGrowth, mean)
aggregate(len~supp, ToothGrowth, mean)
replicate(5, rnorm(3))
?replicate
library("lattice", lib.loc="E:/R/R-3.2.1/library")
require(lattice)
xyploy(MPG.highway ~ Weight | Price, Cars93)
xyplot(MPG.highway ~ Weight | Price, Cars93)
prices <- equal.count(Cars93$Price, number=3, overlap=0)
prices
xyplot(MPG.highway ~ Weight | prices, Cars93)
xyplot((MPG.highway ~ Weight | prices, Cars93), labels=c("Cheap", "Middle", "Expensive"))
xyplot((MPG.highway ~ Weight | prices, Cars93, labels=c("Cheap", "Middle", "Expensive")
xyplot(MPG.highway ~ Weight | prices, Cars93)
xyplot(MPG.highway ~ Weight | prices, Cars93, layout=c(3,1))
xyplot(MPG.highway ~ Weight | prices, Cars93, layout=c(3,1), labels=c("Cheap", "Middle", "Expensive"))
xyplot(MPG.highway ~ Weight | prices, Cars93, layout=c(3,1), labels=c("Cheap", "Middle", "Expensive"))
xyplot(MPG.highway ~ Weight | prices, Cars93, layout=c(3,1))
View(Cars93)
cars2 <- t(Cars93)
View(cars2)
cars21 <- transform(Cars93, price=cut(c(0, 15, 30, 75), labels=c("Cheap", "Middle", "Expensive")))
cars21 <- transform(Cars93, price=cut(Price, c(0, 15, 30, 75), labels=c("Cheap", "Middle", "Expensive")))
View(cars21)
xyplot(MPG.highway ~ Weight | price, cars21)
xyplot(MPG.highway ~ Weight | price, cars21, layout=c(3,1))
xyplot(MPG.highway ~ Weight | price, cars21, layout=c(3,1), type=c("p", "r"))
xyplot(MPG.highway ~ Weight | price, cars93, layout=c(3,1), type=c("p", "r"))
xyplot(MPG.highway ~ Weight | price, Cars93, layout=c(3,1), type=c("p", "r"))
Cars93_1 <- transform(Cars93, price=cut(Price, c(0, 15, 30, 75), labels=c("Cheap", "Middle", "Expensive")))
xyplot(MPG.highway ~ Weight | price, Car93_1, layout=c(3,1), type=c("p", "r"))
require(dplyr)
require(UsingR)
require(HistData)
require(MASS)
require(lattice)
data("kid.weights")
data("michelson")
data("fat")
data("SAT")
data("heartrate")
data("grades")
data("Fingerprints")
data("Titanic")
data("Cars93")
data("ToothGrowth") #not part of UsingR
attach(kid.weights)
attach(michelson)
attach(fat)
attach(SAT)
attach(heartrate)
attach(grades)
attach(Fingerprints)
attach(Cars93)
attach(Titanic)
# use data() to see all datasets
# #use answers() to get answers to some of the problems in the UsingR book
Cars93_1 <- transform(Cars93, price=cut(Price, c(0, 15, 30, 75), labels=c("Cheap", "Middle", "Expensive")))
Cars93_2 <- Cars93, price=cut(Price, c(0, 15, 30, 75), labels=c("Cheap", "Middle", "Expensive"))
?transform
Cars93_2 <- within(Cars93, price=cut(Price, c(0, 15, 30, 75), labels=c("Cheap", "Middle", "Expensive")))
Cars93_2 <- with(Cars93, price=cut(Price, c(0, 15, 30, 75), labels=c("Cheap", "Middle", "Expensive")))
View(Cars93)
View(Cars93_1)
class(Cars93)
class(Cars93_1)
cars92_3 <- mutate(Cars93, price=cut(Price,c(0, 15, 30, 75)), labels=c("Cheap", "Moderate", "Expensive"))
cars92_3 <- mutate(Cars93, price=cut(Price,c(0, 15, 30, 75))
)
View(cars92_3)
cars92_3 <- mutate(Cars93, price=cut(Price,c(0, 15, 30, 75),labels=c("Cheap", "Moderate", "Expensive"))
)
cars93_2 <- mutate(Cars93, price=cut(Price,c(0, 15, 30, 75),labels=c("Cheap", "Moderate", "Expensive"))
xyplot(MPG.highway ~ Weight | price, Car93_2, layout=c(3,1), type=c("p", "r"))
cars93_2 <- mutate(Cars93, price=cut(Price,c(0, 15, 30, 75),labels=c("Cheap", "Moderate", "Expensive")))
cars93_2 <- mutate(Cars93, price=cut(Price,c(0, 15, 30, 75),labels=c("Cheap", "Moderate", "Expensive")))
xyplot(MPG.highway ~ Weight | price, Car93_1, layout=c(3,1), type=c("p", "r"))
Cars93_1 <- transform(Cars93, price=cut(Price, c(0, 15, 30, 75), labels=c("Cheap", "Middle", "Expensive")))
xyplot(MPG.highway ~ Weight | price, Car93_1, layout=c(3,1), type=c("p", "r"))
xyplot(MPG.highway ~ Weight | price, Cars93_1, layout=c(3,1), type=c("p", "r"))
xyplot(MPG.highway ~ Weight | price, Cars93_2, layout=c(3,1), type=c("p", "r"))
Cars93_2 <- mutate(Cars93, price=cut(Price,c(0, 15, 30, 75),labels=c("Cheap", "Moderate", "Expensive")))
xyplot(MPG.highway ~ Weight | price, Cars93_2, layout=c(3,1), type=c("p", "r"))
xyplot(MPG.highway ~ Weight | price, Cars93_1, layout=c(3,1), type=c("p", "r"))
xyplot(MPG.highway ~ Weight | price, Cars93_1, layout=c(3,1), type=c("r"))
xyplot(MPG.highway ~ Weight | price, Cars93_1, layout=c(3,1), type=c("p", "r"))
xyplot(MPG.highway ~ Weight | price, Cars93_2, layout=c(3,1), type=c("p", "r"))
f <- function(x) x^2
x <- seq(-2,2, length=100)
p <- ggplot(data.frame(x=x, y=f(x)), aes=(x=x, y=y)) + geom_line()
p <- ggplot(data.frame(x=x, y=f(x)), aes(x=x, y=y)) + geom_line()
p
curve(f, -2,2)
p2 <- ggplot(Cars93, aes(x=Cylinders, y=MPG.highway)) + geom_boxplot()
p2
p2 <- p2 + geom_jitter(position=position_jitter(w=.1), alha=.25)
p2
p2 <- p2 + geom_jitter(position=position_jitter(w=.1), alha=.15)
p2
p2 <- p2 + geom_jitter(position=position_jitter(w=.1), alha=.55)
p2
p2 <- p2 + geom_jitter(position=position_jitter(w=.1), alpha=.55)
p2
p2 <- p2 + geom_jitter(position=position_jitter(w=.1), alpha=.25)
p2
data("morley")
attach(morley)
View(morley)
exp1_2 <- subset(morley, Expt %in% 1:2)
View(exp1_2)
exp1_2_1 <- morley[Expt==1 | Expt==2,]
View(exp1_2_1)
p2 <- ggplot(exp1_2, aes(x=Run, y=Speed, group=Expt, color=Expt)) + geom_line()
p2
#ggplot2 p 202 UsingR
f <- function(x) x^2
x <- seq(-2,2, length=100)
p <- ggplot(data.frame(x=x, y=f(x)), aes(x=x, y=y)) + geom_line()
#R has a function to do this easily:
curve(f, -2,2)
exp1_2_1 <- morley[Expt==1 | Expt==2]
exp1_2_1 <- morley[Expt==1 | Expt==2,]
exp1_2_1 <- morley[Expt==1:3,]
exp1_2_1 <- morley[Expt<<3,]
exp1_2_1 <- morley[Expt<3,]
exp1_2_1 <- morley[Expt<4,]
p3 <- ggplot(exp1_2, aes(x=Run, y=Speed, group=Expt, color=Expt)) + geom_line()
p3
p3 <- ggplot(exp1_2_1, aes(x=Run, y=Speed, group=Expt, color=Expt)) + geom_line()
p3
p4 <- ggplot(Cars93, aes(x=MPG.highway)) + stat_bin(binwidth=5)
p4
p4 <- ggplot(Cars93, aes(x=MPG.highway)) + stat_bin()
p4
p5 <- ggplot(Cars93, aes(x=MPG.highway, y=..density..)) + stat_bin(binwidth=5)
p5
p6 <- ggplot(Cars95, aes(x=MPG.highway)) + geom_histogram()
p6 <- ggplot(Cars93, aes(x=MPG.highway)) + geom_histogram()
p6
p6 <- ggplot(Cars93, aes(x=MPG.highway)) + geom_histogram(bin=5)
p6
p7 <- ggplot(Cars95, aes(x=MPG.highway, y=..density..)) + geom_histogram(alpha=.5) + geom_density()
p7 <- ggplot(Cars93, aes(x=MPG.highway, y=..density..)) + geom_histogram(alpha=.5) + geom_density()
p7
p7 <- ggplot(Cars93, aes(x=MPG.highway, y=..density..)) + geom_histogram(alpha=.5, binwidth=5) + geom_density()
p7
p8 <- ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point()+ geom_smooth()
p8
p8 <- geom_smooth(method="lm", se=FALSE)#removes the standard error shading from the plot above
p8
p8 <- geom_smooth(method="lm", se=FALSE)#removes the standard error shading from the plot above
p8
p8 <- ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point()+ geom_smooth(method="lm", se=FALSE)
p8
p8 <- ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point()+ geom_smooth(method="lm",formula=y ~ poly(x,2), se=FALSE)
p8
data(PearsonLee)
attach(PearsonLee)
View(PearsonLee)
p9 <- ggplot(PearsonLee, aes(y=child, x=parent)) + geom_point(alpha=.5) +geom_smooth(method="loess") + facet_grid(par ~ chl)
p9
p10 <- ggplot(Cars93_1, aes(x=Weight, y=MPG.highway)) + geom_point(cex=3) + geom_smooth(method="lm", se=FALSE) +
facet_grid(~ price)
p10
p9 <- ggplot(PearsonLee, aes(y=child, x=parent)) + geom_point(alpha=.5) +
geom_smooth(method="loess") + facet_grid(par ~ chl)
p11<- ggplot(PearsonLee, aes(y=child, x=parent)) + geom_point(alpha=.5) +
geom_smooth(method="loess") + facet_grid(par ~ chl, margins="chl")
p9
p11
p9
p11
p9
p11
p12 <- ggplot(morley, aes(x=Speed)) + geom_histogram(binwith=50) + facet_wrap(~Expt)
p12
require(dplyr)
require(UsingR)
require(HistData)
require(MASS)
require(lattice)
data("kid.weights")
data("michelson")
data("fat")
data("SAT")
data("heartrate")
data("grades")
data("Fingerprints")
data("Titanic")
data("morley")
data("Cars93")
data("ToothGrowth") #not part of UsingR
data(PearsonLee)
attach(kid.weights)
attach(michelson)
attach(fat)
attach(SAT)
attach(heartrate)
attach(grades)
attach(Fingerprints)
attach(Cars93)
attach(Titanic)
attach(morley)
attach(PearsonLee)
sample(0:1, size=10, replace=TRUE)
sample(0:1, size=100, replace=TRUE)#default is to sample without replacement
sample1 <- sample(0:1, size=100, replace=TRUE)#default is to sample without replacement
sum(sample1)
sample2 <- sample(1:6, size=10, replace=TRUE)#roll of die 10 times
sum(sample2)
mean(sample2)
sample2 <- sample(1:6, size=1000, replace=TRUE)#roll of die 10 times
mean(sample2)
sample2 <- sample(1:6, size=100000, replace=TRUE)#roll of die 10 times
mean(sample2)
sample3 <- sample(1:6, size=10, replace=TRUE) + sample(1:6, size=10, replace=TRUE)
sample3
sample3 <- sample(1:6, size=1000, replace=TRUE) + sample(1:6, size=1000, replace=TRUE)
mean(sample3)
sample3 <- sample(1:6, size=100000, replace=TRUE) + sample(1:6, size=100000, replace=TRUE)
mean(sample3)
sample3 <- sample(1:6, size=1000000, replace=TRUE) + sample(1:6, size=1000000, replace=TRUE)
mean(sample3)
sampl4 <-  sample(rep(0:1), c(3200, 6800), size=10, replace=TRUE)
sample4 <-  sample(rep(0:1), c(3200, 6800), size=10, replace=TRUE)
sample4
rep(0:1)
sample4
?sample
sample(rep(0:1), c(3200, 6800))
sample(rep(0:1), c(3200, 6800), replace=TRUE)
sample(rep(0:1), c(3200, 6800), size=10,replace=TRUE)
rep(0:2)
rep(0:2, size=10)
rep(0:2, size=10, replace=TRUE)
rep(0:2, c(3200, 6800))
rep(0:2, c(3200, 6800), replace=TRUE)
rep(0:2, c(3200, 6800), size=10)
rep(0:2, size=1)
rep(0:2, size=2)
rep(0:2, size=3)
rep(0:2, size=4)
rep(0:2, size=100)
rep(0:2, size=100, replace=TRUE)
rep(0:2, size=10, replace=TRUE)
?rep
rep(0:2, times=10, replace=TRUE)
rep(0:1, times=10, replace=TRUE)
rep(0:1, times=10)
rep(0:1, times=c(3200, 6800))
require(dplyr)
require(UsingR)
require(HistData)
require(MASS)
require(lattice)
data("kid.weights")
data("michelson")
data("fat")
data("SAT")
data("heartrate")
data("grades")
data("Fingerprints")
data("Titanic")
data("morley")
data("Cars93")
data("ToothGrowth") #not part of UsingR
data(PearsonLee)
attach(kid.weights)
attach(michelson)
attach(fat)
attach(SAT)
attach(heartrate)
attach(grades)
attach(Fingerprints)
attach(Cars93)
attach(Titanic)
attach(morley)
attach(PearsonLee)
dunif(x=1, min=0, max=3)
dunif(x=1, min=0, max=5)
dunif(x=1, min=0, max=10)
dunif(x=1, min=1, max=10)
punif(q=2, min=0, max=3)
punif(q=2, min=0, max=3) # p returns the CDF distribution - this statement gives 1/(b-a) = 1/3
punif(q=1, min=0, max=3) # p returns the CDF distribution - this statement gives 1/(b-a) = 1/3
qunif(p=1/2, min=0, max=3)
runif(n=1, min=0, max=3)
runif(5, min=0, max=1:5)
runif(5, min=0, max=1:5)
runif(5, min=0, max=1:5)
runif(5, min=0, max=1:5)
runif(5, min=0, max=1:5)
runif(10, min=0, max=1:5)
runif(10, min=0, max=1:5)
runif(10, min=0, max=1:5)
runif(10, min=0, max=1:5)
max(runif(10, min=0, max=1:5))
max(runif(10, min=0, max=1:5))
max(runif(10, min=0, max=1:5))
max(runif(10, min=0, max=1:5))
max(runif(10, min=0, max=1:5))
max(runif(10, min=0, max=1:5))
max(runif(10, min=0, max=1:5))
runif(10, min=0, max=1:5)
runif(10, min=0, max=1:5) #returns
runif(10, min=1, max=1:5) #returns 10 random values between 1 and 5
runif(10, min=1, max=1:5) #returns 10 random values between 1 and 5
runif(10, min=1, max=1:5) #returns 10 random values between 1 and 5
runif(10, min=1, max=1:5) #returns 10 random values between 1 and 5
x <- runif(100)
x
d <- density(x)
d
class(d)
?density
sd(d)
sd(x)
d <- density(x)
d <- density(x) #note the outpunt if d is a class of density!
d
curve(dunif, -.1, 1.1, ylim=c(0,max(d$y,1)))
lines(d, lty=2)
rug(x)
?rug
?curve
curve(dunif, d$Min, d$Max, ylim=c(0,max(d$y,1)))
curve(dunif, -.1, 1.1, ylim=c(0,max(d$y,1))) #plots the function
curve(dunif, d$Min-1, d$Max+1, ylim=c(0,max(d$y,1)))
curve(dunif, d$Min-1, d$Max, ylim=c(0,max(d$y,1)))
curve(dunif, d$Min, d$Max, ylim=c(0,max(d$y,1)))
curve(dunif, d$Min-1, d$Max, ylim=c(0,max(d$y,1)))
d$Min
d$min
min(d$x)
curve(dunif, min(d$x), max(d$x), ylim=c(0,max(d$y,1)))
lines(d, lty=2) # adds the density estimate
x <- runif(1000) #1000 random values from uniform distribution
d <- density(x) #note the outpunt if d is a class of density! This is what is returned:
curve(dunif, min(d$x), max(d$x), ylim=c(0,max(d$y,1))) #my version ;)
lines(d, lty=2) # adds the density estimate
rug(x) #adds a rug - 1-d plot - to the plot
curve(dunif, -.1, 1.1, ylim=c(0,max(d$y,1))) #plots the uniform distribution
lines(d, lty=2) # adds the density estimate
rug(x) #adds a rug - 1-d plot - to the plot
?rug
rug(x, lwd=.5) #adds a rug - 1-d plot - to the plot
rug(x, lwd=.05) #adds a rug - 1-d plot - to the plot
lines(d, lty=3) # adds the density estimate
x <- runif(100000) #1000 random values from uniform distribution
d <- density(x) #note the outpunt if d is a class of density! This is what is returned:
curve(dunif, -.1, 1.1, ylim=c(0,max(d$y,1))) #plots the uniform distribution
lines(d, lty=2) # adds the density estimate
rug(x, lwd=.5) #adds a rug - 1-d plot - to the plot
rug(x) #adds a rug - 1-d plot - to the plot
x <- runif(10000000) #1000 random values from uniform distribution
d <- density(x) #note the outpunt if d is a class of density! This is what is returned:
curve(dunif, -.1, 1.1, ylim=c(0,max(d$y,1))) #plots the uniform distribution
lines(d, lty=2) # adds the density estimate
x <- runif(100) #100 random values from uniform distribution
d <- density(x) #note the outpunt if d is a class of density! This is what is returned:
curve(dunif, -.1, 1.1, ylim=c(0,max(d$y,1))) #plots the uniform distribution
lines(d, lty=2) # adds the density estimate
rug(x) #adds a rug - 1-d plot - to the plot
sample(0:1, size=n, replace=TRUE, prob=c(1-p, p))
n <- 10; p <- 1/4
sample(0:1, size=n, replace=TRUE, prob=c(1-p, p))
?sample
sample(0:1, size=n, replace=TRUE, prob=c(1-p, p))
sample(0:1, size=n, replace=TRUE, prob=c(1-p, p))
sample(0:1, size=n, replace=TRUE, prob=c(1-p, p))
sample(0:1, size=n, replace=TRUE, prob=c(1-p, p))
sample(0:1, size=n, replace=TRUE, prob=c(1-p, p))
sample(0:1, size=n, replace=TRUE, prob=c(1-p, p))
sample(0:1, size=n, replace=TRUE, prob=c(1-p, p))
sample(0:1, size=n, replace=TRUE, prob=c(1-p, p))
dbinom(5, size=10, prob=1/2)
pbinom(5, size=10, prob=1/2)
dbinom(5, size=10, prob=1/2)
dbinom(9, size=10, prob=1/2) #result is there is a 24.6% probability that 5 heads will be counted
dbinom(1, size=10, prob=1/2) #result is there is a 24.6% probability that 5 heads will be counted
dbinom(4, size=10, prob=1/2) #result is there is a 24.6% probability that 5 heads will be counted
dbinom(6, size=10, prob=1/2) #result is there is a 24.6% probability that 5 heads will be counted
dbinom(5, size=10, prob=1/2) #result is there is a 24.6% probability that 5 heads will be counted
sum(dbinom(0:6, size=10, prob=1/2))
pbinom(6, size=10, p=1/2)
?dbinom
pbinom(5, size=10, prob=1/2)
dbinom(5, size=10, prob=1/2)
